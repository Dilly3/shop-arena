// Code generated by MockGen. DO NOT EDIT.
// Source: ./db_interface.go

// Package mock_database is a generated GoMock package.
package database

import (
	reflect "reflect"

	models "github.com/decadevs/shoparena/models"
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// CreateBuyer mocks base method.
func (m *MockDB) CreateBuyer(user *models.Buyer) (*models.Buyer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBuyer", user)
	ret0, _ := ret[0].(*models.Buyer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBuyer indicates an expected call of CreateBuyer.
func (mr *MockDBMockRecorder) CreateBuyer(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuyer", reflect.TypeOf((*MockDB)(nil).CreateBuyer), user)
}

// CreateSeller mocks base method.
func (m *MockDB) CreateSeller(user *models.Seller) (*models.Seller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSeller", user)
	ret0, _ := ret[0].(*models.Seller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSeller indicates an expected call of CreateSeller.
func (mr *MockDBMockRecorder) CreateSeller(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSeller", reflect.TypeOf((*MockDB)(nil).CreateSeller), user)
}

// FindAllSellersExcept mocks base method.
func (m *MockDB) FindAllSellersExcept(except string) ([]models.Seller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllSellersExcept", except)
	ret0, _ := ret[0].([]models.Seller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllSellersExcept indicates an expected call of FindAllSellersExcept.
func (mr *MockDBMockRecorder) FindAllSellersExcept(except interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllSellersExcept", reflect.TypeOf((*MockDB)(nil).FindAllSellersExcept), except)
}

// FindBuyerByEmail mocks base method.
func (m *MockDB) FindBuyerByEmail(email string) (*models.Buyer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBuyerByEmail", email)
	ret0, _ := ret[0].(*models.Buyer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBuyerByEmail indicates an expected call of FindBuyerByEmail.
func (mr *MockDBMockRecorder) FindBuyerByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBuyerByEmail", reflect.TypeOf((*MockDB)(nil).FindBuyerByEmail), email)
}

// FindBuyerByPhone mocks base method.
func (m *MockDB) FindBuyerByPhone(phone string) (*models.Buyer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBuyerByPhone", phone)
	ret0, _ := ret[0].(*models.Buyer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBuyerByPhone indicates an expected call of FindBuyerByPhone.
func (mr *MockDBMockRecorder) FindBuyerByPhone(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBuyerByPhone", reflect.TypeOf((*MockDB)(nil).FindBuyerByPhone), phone)
}

// FindBuyerByUsername mocks base method.
func (m *MockDB) FindBuyerByUsername(username string) (*models.Buyer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBuyerByUsername", username)
	ret0, _ := ret[0].(*models.Buyer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBuyerByUsername indicates an expected call of FindBuyerByUsername.
func (mr *MockDBMockRecorder) FindBuyerByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBuyerByUsername", reflect.TypeOf((*MockDB)(nil).FindBuyerByUsername), username)
}

// FindSellerByEmail mocks base method.
func (m *MockDB) FindSellerByEmail(email string) (*models.Seller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSellerByEmail", email)
	ret0, _ := ret[0].(*models.Seller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSellerByEmail indicates an expected call of FindSellerByEmail.
func (mr *MockDBMockRecorder) FindSellerByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSellerByEmail", reflect.TypeOf((*MockDB)(nil).FindSellerByEmail), email)
}

// FindSellerByPhone mocks base method.
func (m *MockDB) FindSellerByPhone(phone string) (*models.Seller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSellerByPhone", phone)
	ret0, _ := ret[0].(*models.Seller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSellerByPhone indicates an expected call of FindSellerByPhone.
func (mr *MockDBMockRecorder) FindSellerByPhone(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSellerByPhone", reflect.TypeOf((*MockDB)(nil).FindSellerByPhone), phone)
}

// FindSellerByUsername mocks base method.
func (m *MockDB) FindSellerByUsername(username string) (*models.Seller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSellerByUsername", username)
	ret0, _ := ret[0].(*models.Seller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSellerByUsername indicates an expected call of FindSellerByUsername.
func (mr *MockDBMockRecorder) FindSellerByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSellerByUsername", reflect.TypeOf((*MockDB)(nil).FindSellerByUsername), username)
}

// SearchDB mocks base method.
func (m *MockDB) SearchDB(c *gin.Context) ([]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchDB", c)
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchDB indicates an expected call of SearchDB.
func (mr *MockDBMockRecorder) SearchDB(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchDB", reflect.TypeOf((*MockDB)(nil).SearchDB), c)
}

// TokenInBlacklist mocks base method.
func (m *MockDB) TokenInBlacklist(token *string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenInBlacklist", token)
	ret0, _ := ret[0].(bool)
	return ret0
}

// TokenInBlacklist indicates an expected call of TokenInBlacklist.
func (mr *MockDBMockRecorder) TokenInBlacklist(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenInBlacklist", reflect.TypeOf((*MockDB)(nil).TokenInBlacklist), token)
}

// UpdateUser mocks base method.
func (m *MockDB) UpdateUser(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockDBMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDB)(nil).UpdateUser), user)
}
